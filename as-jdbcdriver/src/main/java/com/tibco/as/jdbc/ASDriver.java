// -------------------------------------------------------------------
//  Copyright (c) 2012-2013 TIBCO Software, Inc.
//  All rights reserved.
//  For more information, please contact:
//  TIBCO Software Inc., Palo Alto, California, USA
// -------------------------------------------------------------------
package com.tibco.as.jdbc;

import com.tibco.as.space.ASException;
import com.tibco.as.space.Metaspace;

import java.sql.*;
import java.util.logging.Logger;

public class ASDriver implements java.sql.Driver
{

    public static final int    JDBC_DRIVER_MAJOR_VERSION = 1;
    public static final int    JDBC_DRIVER_MINOR_VERSION = 0;
    public static final int    JDBC_DRIVER_POINT_VERSION = 0;

    public static final String JDBC_DRIVER_NAME          = "TIBCO ActiveSpaces(R) JDBC Driver";

    static
    {
        try
        {
            DriverManager.registerDriver(new ASDriver());
        }
        catch (Throwable t)
        {
            t.printStackTrace();
        }
    }

    public ASDriver ()
    {
    }

    /**
     * @param url
     *            JDBC URL for connecting to an ActiveSpaces metaspace. The URL
     *            has the form
     *            jdbc:tibco:as[:<data-source-name>][;<propertyName>=
     *            <propertyValue>]*
     * @param info
     *            Can contain the properties required for connecting to the
     *            metaspace. Optionally, a metaspace object can be specified by
     *            setting it under the key {@code Metaspace.class.getName()}
     * @return
     * @throws SQLException
     */
    public Connection connect (String url, java.util.Properties info) throws SQLException
    {
        ASConnection driverConn = null;
        if (!acceptsURL(url))
        {
            throw new SQLException("Unknown URL format. Expected format starts with: " + Utils.URL);
        }
        try
        {
            // parse the URL to see if it contains any metaspace settings
            java.util.Properties settings = Utils.parseURL(url);

            // check for additional connection parameters
            if (info != null && !info.isEmpty())
            {
                // info parameters will override parameters in the URL
                settings = checkProperties(info, settings);
            }
            if (settings != null && !settings.isEmpty())
            {
                Metaspace metaspace = (Metaspace) info.get(Metaspace.class.getName());
                if (metaspace != null)
                    driverConn = new ASConnection(metaspace);
                else
                    driverConn = new ASConnection(settings);
            }
            else
            {
                // create a connection to a metaspace using the default ActiveSpaces settings
                driverConn = new ASConnection();
            }
        }
        catch (ASException as)
        {
            throw new SQLException(as);
        }
        return driverConn;
    }

    public boolean acceptsURL (String url) throws SQLException
    {
        boolean myURL = false;
        if (url != null && !url.isEmpty())
            myURL = url.startsWith(Utils.URL);
        return myURL;
    }

    public DriverPropertyInfo[] getPropertyInfo (String url, java.util.Properties info) throws SQLException
    {
        // return an array of the properties which are needed to connect to
        // an ActiveSpaces metaspace; set the values to the default used by AS
        DriverPropertyInfo[] metaspaceProps = new DriverPropertyInfo[6];
        metaspaceProps[0] = new DriverPropertyInfo("metaspace", "ms");
        metaspaceProps[0].description = "metaspace name";
        metaspaceProps[1] = new DriverPropertyInfo("member_name", null);
        metaspaceProps[1].description = "unique member name; autogenerated if not supplied";
        metaspaceProps[2] = new DriverPropertyInfo("discovery", "tibpgm");
        metaspaceProps[2].description = "discovery URL";
        metaspaceProps[3] = new DriverPropertyInfo("listen", "tcp");
        metaspaceProps[3].description = "listen URL";
        metaspaceProps[4] = new DriverPropertyInfo("remote_discovery", null);
        metaspaceProps[4].description = "remote discovery URL";
        metaspaceProps[5] = new DriverPropertyInfo("remote_listen", null);
        metaspaceProps[5].description = "remote listen URL";
        return metaspaceProps;
    }

    public int getMajorVersion ()
    {
        return JDBC_DRIVER_MAJOR_VERSION;
    }

    public int getMinorVersion ()
    {
        return JDBC_DRIVER_MINOR_VERSION;
    }

    public boolean jdbcCompliant ()
    {
        return false;
    }

    /**
     * checkProperties - combines any current properties with any new properties
     *                   new properties override current properties
     */
    private java.util.Properties
            checkProperties (java.util.Properties newSettings, java.util.Properties currentSettings)
    {
        java.util.Properties result = null;

        // handle previous settings
        if (currentSettings != null && !currentSettings.isEmpty())
        {
            if (newSettings == null || newSettings.isEmpty())
                result = currentSettings;
            else
            {
                // copy our current settings into our new settings
                result = new java.util.Properties(currentSettings);
            }
        }
        // now handle any new settings
        if (newSettings != null && !newSettings.isEmpty())
        {
            if (result == null)
                result = newSettings;
            else
            {
                // iterate through the new settings and store them into the results
                java.util.Enumeration<Object> e = newSettings.keys();
                while (e.hasMoreElements())
                {
                    String key = (String) e.nextElement();
                    String value = newSettings.getProperty(key);
                    result.put(key, value);
                }
            }
        }
        return result;
    }

    public Logger getParentLogger() throws SQLFeatureNotSupportedException {
        System.out.println(" getParentLogger() called");
        throw new SQLFeatureNotSupportedException(Utils.AS_FEATURE_NOT_SUPPORTED);
    }
}
